let resultStr = "{\"data\":[[8.85,0.994],[6.47,0.983],[18.5,0.985],[7.41,0.998],[11.2,0.976],[8.99,0.978],[22.4,0.989],[22.6,0.988],[6.9,0.995],[18.4,0.991],[15.3,1],[7.4,0.999],[15.4,0.999],[7.57,0.977],[22.6,0.994],[7.41,0.998],[13.3,0.98],[13.2,0.991],[6.63,0.994],[15.6,0.984],[15.5,0.996],[15.7,0.977],[15.4,0.996],[7.58,0.977],[11.1,0.983],[7.08,0.994],[22.4,0.997],[22.4,0.991],[18.7,0.979],[13.4,0.978],[22.5,0.989],[22.1,1],[22.8,0.979],[6.72,0.984],[22.7,0.991],[7.29,0.977],[6.75,0.994],[15.6,0.978],[11.2,0.982],[13.1,0.994],[6.06,0.976],[6.8,0.983],[8.84,0.999],[7.24,0.977],[7.58,0.976],[6.3,0.999],[13.1,0.997],[22.6,0.993],[7.58,0.975],[7.43,0.995],[8.86,0.995],[7.48,0.99],[15.5,0.995],[8.97,0.983],[15.5,0.991],[15.5,0.989],[11.1,0.99],[8.83,0.998],[6.99,0.991],[15.7,0.975],[18.3,0.995],[15.4,1],[15.3,1],[7.55,0.98],[15.4,0.995],[18.6,0.982],[15.6,0.984],[22.3,1],[6.41,0.994],[13.1,0.998],[5.96,0.996],[22.7,0.99],[8.92,0.986],[8.82,0.999],[6.22,0.975]],\"model\":[[5.83,0.997406362862284],[6.33,0.9874798845598847],[6.83,0.985891241872163],[7.33,0.975365],[7.83,0.9749999999999999],[8.33,0.999961625874126],[8.83,0.9975933760614012],[9.33,0.9750273448773447],[9.83,0.9750273448773447],[10.33,0.9992332701302337],[10.83,0.9992332701302337],[11.33,0.9754027273931956],[11.83,0.9754027273931956],[12.33,0.999401104388143],[12.83,0.999401104388143],[13.33,0.9823985533111703],[13.83,0.9770456050466769],[14.33,0.9770456050466769],[14.83,0.9984342266647547],[15.33,0.9984342266647547],[15.83,0.9765542910401261],[16.33,0.9765542910401261],[16.83,0.9765542910401261],[17.33,0.999602564081143],[17.83,0.999602564081143],[18.33,0.9949313007814624],[18.83,0.9755686708047598],[19.33,0.9755686708047598],[19.83,0.9755686708047598],[20.33,0.9755686708047598],[20.83,0.9997033329030292],[21.33,0.9997033329030292],[21.83,0.9997033329030292],[22.33,0.9969982819404513],[22.83,0.9814359111172962]],\"predict\":[[6.64,0.987],[6.49,0.986],[9.02,0.977],[7.57,0.977],[11.2,0.979],[13.1,0.996],[13.3,0.982],[6.58,0.986],[22.4,0.995],[18.6,0.981],[15.3,0.998],[11.1,0.987],[15.6,0.984],[10.9,0.999],[7.47,0.991],[11,0.995],[15.7,0.979],[13.1,0.996],[6.86,0.986],[6.45,0.99],[7.11,0.993],[6.62,0.984],[22.8,0.981],[23,0.978],[18.3,0.995],[11,0.995],[13.4,0.977],[8.9,0.989],[23,0.978],[22.9,0.979],[6.36,0.992],[6.36,0.992],[15.7,0.979],[8.97,0.982],[15.6,0.984],[18.7,0.977],[22.6,0.989],[7.47,0.991],[6.75,0.987],[22.7,0.985],[18.2,0.998],[7.44,0.995],[11.2,0.979],[7.48,0.99],[5.88,0.997],[11,0.995],[13.2,0.99],[22.9,0.979],[13.3,0.982],[23.1,0.976],[8.88,0.992],[22.8,0.981],[6.94,0.988],[11.2,0.979],[11.1,0.987],[9.01,0.977],[6.89,0.985],[22.9,0.979],[18.6,0.981],[15.4,0.996],[13.1,0.996],[6.99,0.987],[11.1,0.987],[11.2,0.979],[7.14,0.991]],\"x_label\":\"P2\",\"y_label\":\"Turb health\",\"size\":\"1\"}";

let main = function() {

    let plot = JSON.parse(resultStr);
    console.log(plot);

    let plotsHolder = $('#charts_area');

    let traces = [];

    // we always have three traces: data, model, predict. Data and model are scatter while predict is the model

    // data points
    let dataTrace = {
        type: 'scatter',
        name: 'Data',
        mode: 'markers',
        marker: {
            color: 'blue'
        },
        x: plot.data.map(function(value) { return value[0]; }),
        y: plot.data.map(function(value) { return value[1]; })
    };

    // predict points
    let predictTrace = {
        type: 'scatter',
        name: 'Predict',
        mode: 'markers',
        marker: {
            color: 'red'
        },
        x: plot.predict.map(function(value) { return value[0]; }),
        y: plot.predict.map(function(value) { return value[1]; }),
    };

    // model trace
    let modelTrace = {
        type: 'scatter',
        name: 'Model',
        mode: 'lines',
        marker: {
            color: 'lightgray'
        },
        x: plot.model.map(function(value) { return value[0]; }),
        y: plot.model.map(function(value) { return value[1]; }),
    };

    // finished traces
    // now add them
    traces.push(modelTrace);
    traces.push(dataTrace);
    traces.push(predictTrace);

    // general plot info
    let layout = {
        margin: {
            pad: 4
        },
        legend: {
            "orientation": "h",
            y: -0.2
        },
        title: plot.title,
        xaxis: {
            title: {
                text: plot.x_label
            }
        },
        yaxis: {
            title: {
            }
        }
    };

    // let rowElement = $("<div>").addClass("row mb-3 mx-0").attr("id", lastRow);
    // plotsHolder.append(rowElement);

    let sizeClasses; // full width
    if (plot.size === 3) {
        sizeClasses = "col-lg-6 col-xl-4";
    }else if (plot.size === 2) {
        sizeClasses = "col-lg-12 col-xl-6";
    }else{
        sizeClasses = "col-lg-12 col-xl-12";
    }

    let buffer = $("<div>").addClass(sizeClasses + "order-lg-2 order-xl-1");

    let plotContainer = $("<div>").addClass("kt-portlet kt-portlet--height-fluid-half");
    buffer.append(plotContainer);

    let plotElement = $("<div>").attr("id", "1").addClass("");
    plotContainer.append(plotElement);

    plotsHolder.append(buffer);

    Plotly.newPlot("1", traces, layout, {showSendToCloud: false});
};

$(document).ready(function () {
    "use strict";

    main();
});